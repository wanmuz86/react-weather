{"version":3,"sources":["logo.svg","components/Header.js","components/Footer.js","components/WeatherTable.js","components/WeatherDetail.js","components/WeatherSearch.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","WeatherTable","props","weathers","map","val","key","dt","onClick","handleWeatherSelect","src","weather","icon","main","date","Date","toDateString","temp","day","toFixed","WeatherDetail","selectedWeather","humidity","pressure","sunset","toTimeString","sunrise","WeatherSearch","state","cityName","type","id","placeholder","value","this","onChange","e","setState","target","handleSearch","React","Component","Main","city","console","log","fetchApi","filter","fetch","then","response","json","data","catch","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.17697f06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Header(){\nreturn (\n<header className=\"bg-dark text-center py-5 text-light\">\n    <h1>Weather app</h1>\n    </header>\n)\n}\nexport default Header;","import React from 'react';\n\nfunction Footer(){\n    return <footer className=\"bg-dark text-center py-5 text-light\">\n    <p>Copyright &copy; 2020</p>\n    </footer>\n    \n}\nexport default Footer;","import React from 'react';\n\nfunction WeatherTable(props) {\n    const transformDate = (date) => {\n        return (new Date(date)).toDateString()\n    }\n    return <table className=\"table table-bordered table-striped table-hover\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>Weather</th>\n                <th>Date</th>\n                <th>Temperature</th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                props.weathers.map(val => {\n                    return (\n                        <tr key={val.dt} onClick={() => props.handleWeatherSelect(val.dt)}>\n                            <td><img src={`https://openweathermap.org/img/wn/${val.weather[0].icon}@2x.png`} />\n                            </td>\n                            <td>{val.weather[0].main}</td>\n                            <td>{transformDate(val.dt * 1000)}</td>\n                            <td>{(val.temp.day - 273.15).toFixed(0)} &deg; C</td>\n                        </tr>\n                    )\n                })\n            }\n\n        </tbody>\n    </table>;\n}\nexport default WeatherTable;","import React from 'react';\n\nfunction WeatherDetail({selectedWeather}){\nreturn <div className=\"card py-3 px-3 text-center\">\n<img src={`https://openweathermap.org/img/wn/${selectedWeather.weather[0].icon}@2x.png`}/>\n<p>{selectedWeather.temp.day -273 } &deg; C</p>\n<p>{(new Date(selectedWeather.dt)).toDateString()}</p>\n<p>{selectedWeather.humidity}</p>\n<p>{selectedWeather.pressure}</p>\n<p>{(new Date(selectedWeather.sunset)).toTimeString()}</p>\n<p>{(new Date(selectedWeather.sunrise)).toTimeString()}</p>\n</div>\n}\nexport default WeatherDetail;","import React from 'react';\n\nclass WeatherSearch extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n          cityName:''\n        }\n    }\n    render(){\n        return (\n            <div className=\"row py-3 px-3\">\n            <div className=\"col-9\">\n            <input type=\"text\" className=\"form-control\" id=\"cityinput\" \n            placeholder=\"Enter City\" value={this.state.cityName} \n            onChange={(e)=> this.setState({cityName:e.target.value})}/>\n          </div>\n          <div className=\"col-3\">\n            <button type=\"submit\" \n            className=\"btn btn-primary mb-3\" \n            onClick={()=>this.props.handleSearch(this.state.cityName)}>Search</button>\n            </div>\n          </div>)\n    }\n}\nexport default WeatherSearch;","import React from 'react';\nimport WeatherTable from './WeatherTable';\nimport WeatherDetail from './WeatherDetail';\nimport WeatherSearch from './WeatherSearch';\nclass Main extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            weathers : [],\n            selectedWeather : null\n        }\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <WeatherSearch handleSearch={this.handleSearch}/>\n                <WeatherTable weathers={this.state.weathers} handleWeatherSelect={this.handleWeatherSelect}/>\n               { this.state.selectedWeather ?\n                <WeatherDetail selectedWeather={this.state.selectedWeather}/>\n                :\n                <div/>\n               } \n            </div>\n        )\n    }\n\n    handleSearch = (city) =>{\n        console.log(city)\n        this.fetchApi(city)\n    }\n    handleWeatherSelect = (dt) =>{\n        console.log(dt)\n        let selectedWeather = this.state.weathers.filter(val=>{\n            return val.dt === dt\n        })\n        this.setState({\n            selectedWeather:selectedWeather\n        })\n    }\n\n    componentDidMount() {\n       \n    }\n\n    fetchApi(city) {\n        fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&appid=9782b24d506f53b56b45b8f288d37803\n\n        `)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                this.setState({\n                    weathers:data[\"list\"]\n                })\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Main from './components/Main'\nfunction App() {\n  return (\n    <div >\n      <Header/>\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}